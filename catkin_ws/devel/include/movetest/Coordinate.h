// Generated by gencpp from file movetest/Coordinate.msg
// DO NOT EDIT!


#ifndef MOVETEST_MESSAGE_COORDINATE_H
#define MOVETEST_MESSAGE_COORDINATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace movetest
{
template <class ContainerAllocator>
struct Coordinate_
{
  typedef Coordinate_<ContainerAllocator> Type;

  Coordinate_()
    : xcoordinate(0)
    , ycoordinate(0)
    , zcoordinate(0)
    , roll(0)
    , pitch(0)
    , yaw(0)  {
    }
  Coordinate_(const ContainerAllocator& _alloc)
    : xcoordinate(0)
    , ycoordinate(0)
    , zcoordinate(0)
    , roll(0)
    , pitch(0)
    , yaw(0)  {
    }



   typedef uint64_t _xcoordinate_type;
  _xcoordinate_type xcoordinate;

   typedef uint64_t _ycoordinate_type;
  _ycoordinate_type ycoordinate;

   typedef uint64_t _zcoordinate_type;
  _zcoordinate_type zcoordinate;

   typedef uint64_t _roll_type;
  _roll_type roll;

   typedef uint64_t _pitch_type;
  _pitch_type pitch;

   typedef uint64_t _yaw_type;
  _yaw_type yaw;




  typedef boost::shared_ptr< ::movetest::Coordinate_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movetest::Coordinate_<ContainerAllocator> const> ConstPtr;

}; // struct Coordinate_

typedef ::movetest::Coordinate_<std::allocator<void> > Coordinate;

typedef boost::shared_ptr< ::movetest::Coordinate > CoordinatePtr;
typedef boost::shared_ptr< ::movetest::Coordinate const> CoordinateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movetest::Coordinate_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movetest::Coordinate_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace movetest

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'movetest': ['/home/baxter/BaxterMovementTest/catkin_ws/src/movetest/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::movetest::Coordinate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movetest::Coordinate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movetest::Coordinate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movetest::Coordinate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movetest::Coordinate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movetest::Coordinate_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movetest::Coordinate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ad3abf38e683f2615b659787ef3c61f5";
  }

  static const char* value(const ::movetest::Coordinate_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xad3abf38e683f261ULL;
  static const uint64_t static_value2 = 0x5b659787ef3c61f5ULL;
};

template<class ContainerAllocator>
struct DataType< ::movetest::Coordinate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movetest/Coordinate";
  }

  static const char* value(const ::movetest::Coordinate_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movetest::Coordinate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 xcoordinate\n\
uint64 ycoordinate\n\
uint64 zcoordinate\n\
\n\
uint64 roll\n\
uint64 pitch\n\
uint64 yaw\n\
";
  }

  static const char* value(const ::movetest::Coordinate_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movetest::Coordinate_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.xcoordinate);
      stream.next(m.ycoordinate);
      stream.next(m.zcoordinate);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Coordinate_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movetest::Coordinate_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movetest::Coordinate_<ContainerAllocator>& v)
  {
    s << indent << "xcoordinate: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.xcoordinate);
    s << indent << "ycoordinate: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.ycoordinate);
    s << indent << "zcoordinate: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.zcoordinate);
    s << indent << "roll: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVETEST_MESSAGE_COORDINATE_H
